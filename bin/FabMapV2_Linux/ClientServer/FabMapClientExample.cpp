#include "FABMAP.h"
#include <iostream>
#include <string>

int main(int argc, char * argv[])
{
    std::string sImagePath;
    if (argc > 1)
    {
        sImagePath = std::string(argv[1]);
    }
    else
    {
        sImagePath = std::string("../Resources/Sample_Data/Images");
    }
    
    std::cout << "Looking for images at path: " << sImagePath << "\n";
    std::cout << "You may specify a different path on the command line.";
    std::cout << std::endl;
    
    //Create a client
    //The parameters are the IP address and port of the MOOSDB.
    CFABMAPClient FABMAPEngine;
    FABMAPEngine.Open("localhost",9000);
    
    //Supply images by providing their full path
    //The FABMAP engine computes how likely each of the places in the map 
    //was to have generated the given image.
    //The image is also added to the map so that it can be recognised in future.
    //
    //The return value is the ID of the "place" added. This value can be used
    //in the GetLocationProbabiity method. 
    int ID1 = FABMAPEngine.ProcessImage(sImagePath + std::string("/00001.jpg"));
    
    int ID2 = FABMAPEngine.ProcessImage(sImagePath + std::string("/00002.jpg"));
    
    //You can also supply observations which consist of multiple images
    //for example, if the robot has multiple cameras, or collects panoramas using a pan-tilt
    std::vector<std::string> multi_part_observation; 
    multi_part_observation.push_back(sImagePath + std::string("/00003.jpg"));
    multi_part_observation.push_back(sImagePath + std::string("/00004.jpg"));
    int ID4 = FABMAPEngine.ProcessImage(multi_part_observation);
    
    int ID5 = FABMAPEngine.ProcessImage(sImagePath + std::string("/00005.jpg"));
    
    //get the most probable place
    //The possibilities are the places in the map
    //or the special NEW PLACE value, meaning that the image 
    //was most likely to have been generated by a place not already visited.
    //If this is the case sFileName will be set to the value "NEW PLACE"
    double dfProb;
    unsigned int nPlace;
    std::string sPlaceName;
    std::string sFileName;
    if(FABMAPEngine.GetMostProbablePlace(nPlace,sFileName, dfProb))
    {
        std::cout<<"Last place added is most similar to place "<< nPlace <<" which corresponds to " << sFileName << std::endl;
        std::cout<<"   estimated probability of assignment is "<< dfProb << std::endl << std::endl;
    }
    else
    {
        std::cout<<"Something is wrong...!"<<std::endl;
    }
    
    //Fetch probability of being at a specific place.
    unsigned int nPlaceId =0;
    dfProb = FABMAPEngine.GetLocationProbabilty(nPlaceId);
    std::cout << "Probability that the last image added was generated by place 0: " << dfProb << std::endl;
    
    //An alternative way to do the look-up
    dfProb = FABMAPEngine.GetLocationProbabilty(sImagePath + std::string("/00001.jpg"));
    std::cout << "Probability that the last image added was generated by place 0: " << dfProb << std::endl << std::endl;
    
    //Fetch the full PDF
    std::set< Place > pdf = FABMAPEngine.GetPDF();
    for ( std::set< Place >::const_iterator itr = pdf.begin(); itr != (--pdf.end()); ++itr )
    {
        //The i-th entry in pdf corresponds to the probability that the last supplied image was generated from place with ID i.
        std::cout << "The probability that place " << itr->PlaceID << " generated the last observation: " << itr->dfProbWrtLastObservation << std::endl; 
    }
    //The final entry in pdf is special. It corresponds to the probability that last processed image came from a new place not in the map.
    std::cout << "The probability that the last observation came from a NEW place: " << (--pdf.end())->dfProbWrtLastObservation << std::endl; 
    
}
